import oracledb # cx_Oracle 대신 oracledb 임포트
import os

# --- 1. TNS_ADMIN 환경 변수 설정 (tnsnames.ora 파일이 있는 디렉토리 경로) ---
# 이 경로는 사용자의 tnsnames.ora 파일 위치에 맞게 수정해야 합니다.
# 예: r"C:\Oracle\network\admin" 또는 "/home/user/oracle/network/admin"
TNS_ADMIN_DIR = r"C:\app\product\11.2.0\client_1\network\admin" # "/path/to/your/tnsnames_folder" # 실제 경로로 변경하세요!

# # 코드 내에서 TNS_ADMIN 환경 변수 설정
os.environ['TNS_ADMIN'] = TNS_ADMIN_DIR
print(f"TNS_ADMIN 환경 변수 설정: {os.environ['TNS_ADMIN']}")

# --- 2. 데이터베이스 연결 정보 설정 ---
# 사용자 환경에 맞게 변경해주세요.
# DB_ALIAS는 tnsnames.ora 파일에 정의된 별칭입니다.
DB_USER     = "sch"      # Oracle 사용자 이름
DB_PASSWORD = "sch#2021"  # Oracle 비밀번호
DB_ALIAS    = "DEVERP"       # tnsnames.ora 파일에 정의된 데이터베이스 별칭

# --------------------------------------------------------------------------------------------------------
# Oracle DB 연결
try:
    connection = oracledb.connect(user=DB_USER, password=DB_PASSWORD, dsn=DB_ALIAS)
    print("Oracle DB에 성공적으로 연결되었습니다.")

    # 커서 사용 예시
    cursor = connection.cursor()
    cursor.execute("SELECT sysdate FROM dual")
    for row in cursor:
        print("현재 Oracle 날짜:", row[0])

except connection.DatabaseError as e:
    print("오류 발생:", e)

finally:
    if cursor:
        cursor.close()
    if connection:
        connection.close()
# --------------------------------------------------------------------------------------------------------


# # --- 3. 데이터 삽입 함수 정의 ---
# def insert_product_data(product_name, price):
#     connection = None
#     cursor = None
#     try:
#         # 데이터베이스 연결
#         # DSN으로 TNS_ADMIN에 지정된 디렉토리의 tnsnames.ora 파일에 있는 별칭을 사용
#         connection = oracledb.connect(user=DB_USER, password=DB_PASSWORD, dsn=DB_ALIAS)
#         print(f"Oracle 데이터베이스 ({DB_ALIAS})에 성공적으로 연결되었습니다.")

#         cursor = connection.cursor()

#         # 테이블이 없으면 생성 (최초 한 번만 실행)
#         # 실제 운영 환경에서는 테이블이 미리 생성되어 있어야 합니다.
#         try:
#             cursor.execute("""
#                 CREATE TABLE PYTHON_PRODUCTS (
#                     PRODUCT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
#                     PRODUCT_NAME VARCHAR2(100),
#                     PRICE NUMBER(10, 2),
#                     INSERT_DATE DATE DEFAULT SYSDATE
#                 )
#             """)
#             print("테이블 'PYTHON_PRODUCTS'가 생성되었습니다.")
#         except oracledb.Error as e:
#             if "ORA-00955" in str(e): # ORA-00955: name is already used by an existing object (테이블이 이미 존재)
#                 print("테이블 'PYTHON_PRODUCTS'는 이미 존재합니다.")
#             else:
#                 raise e # 다른 오류는 다시 발생시킴


#         # 데이터 삽입 SQL
#         sql_insert = "INSERT INTO PYTHON_PRODUCTS (PRODUCT_NAME, PRICE) VALUES (:1, :2)"

#         # 데이터 삽입 (바인드 변수 사용 권장 - SQL 인젝션 방지)
#         cursor.execute(sql_insert, (product_name, price))

#         # 변경사항 커밋
#         connection.commit()
#         print(f"제품 '{product_name}' (가격: {price}) 데이터가 성공적으로 저장되었습니다.")

#     except oracledb.Error as e:
#         # oracledb.Error 객체는 에러 코드를 직접 제공합니다.
#         print(f"Oracle 오류 발생: {e.code} - {e.message}")
#         # 오류 발생 시 롤백 (선택 사항)
#         if connection:
#             connection.rollback()
#             print("변경사항이 롤백되었습니다.")
#     finally:
#         # 커서와 연결 닫기 (항상 실행)
#         if cursor:
#             cursor.close()
#         if connection:
#             connection.close()
#         print("데이터베이스 연결이 종료되었습니다.")

# # --- 4. 함수 호출 예제 ---
# if __name__ == "__main__":
#     insert_product_data("모니터", 350000.00)
#     insert_product_data("웹캠", 50000.00)

#     # 데이터 조회 (선택 사항)
#     connection = None
#     cursor = None
#     try:
#         connection = oracledb.connect(user=DB_USER, password=DB_PASSWORD, dsn=DB_ALIAS)
#         cursor = connection.cursor()
#         cursor.execute("SELECT PRODUCT_ID, PRODUCT_NAME, PRICE, INSERT_DATE FROM PYTHON_PRODUCTS ORDER BY PRODUCT_ID DESC")
#         rows = cursor.fetchall()
#         print("\n--- 저장된 데이터 ---")
#         for row in rows:
#             print(f"ID: {row[0]}, 제품명: {row[1]}, 가격: {row[2]}, 등록일: {row[3]}")
#     except oracledb.Error as e:
#         print(f"데이터 조회 중 오류 발생: {e.code} - {e.message}")
#     finally:
#         if cursor:
#             cursor.close()
#         if connection:
#             connection.close()