import cx_Oracle  # pip install cx_Oracle 
import os

# --- 1. Oracle 클라이언트 라이브러리 경로 설정 (선택 사항이지만 권장) ---
# 일반적으로 Oracle Instant Client가 설치된 경우, 해당 경로를 명시해주는 것이 좋습니다.
# C:\oracle\instantclient_19_12 와 같이 실제 Instant Client 경로로 변경하세요.
# Windows 환경의 경우, PATH 환경 변수에 Instant Client 경로를 추가했다면 이 부분은 생략 가능합니다.
# macOS/Linux 환경의 경우, DYLD_LIBRARY_PATH 또는 LD_LIBRARY_PATH 환경 변수에 Instant Client 경로를 추가할 수도 있습니다.
try:
    # 이 경로는 사용자의 시스템에 맞게 수정해야 합니다.
    # 예: cx_Oracle.init_oracle_client(lib_dir=r"C:\oracle\instantclient_21_12")
    cx_Oracle.init_oracle_client(lib_dir=r"C:\app\product\11.2.0\client_1")
    # 예: cx_Oracle.init_oracle_client(lib_dir="/Users/youruser/instantclient_19_8")
    # 특정 버전의 Instant Client가 필요한 경우 주석 해제 후 경로를 설정하세요.
    # cx_Oracle.init_oracle_client(lib_dir=os.environ.get("ORACLE_CLIENT_HOME", "/usr/local/oracle/instantclient_21_12"))
    pass
except cx_Oracle.Error as e:
    print(f"Oracle Client 초기화 오류: {e}")
    print("Oracle Instant Client 경로가 올바른지 확인하거나, PATH 환경 변수에 추가하세요.")

# --- 2. 데이터베이스 연결 정보 설정 ---
# 사용자 환경에 맞게 변경해주세요.
# DSN (Data Source Name) 형식: 'hostname:port/service_name' 또는 'hostname:port/sid'
# TNSNAMES.ORA를 사용하는 경우: 'net_service_name'
DB_USER     = "sch"       # Oracle 사용자 이름
DB_PASSWORD = "sch#2021"  # Oracle 비밀번호
DB_DSN      = "211.230.232.68:1251/DEVERP"  # 예: 'localhost:1521/xe' (XE 버전) 또는 'your_oracle_ip:1521/orcl' (표준)

# --- 3. 데이터 삽입 함수 정의 ---
def insert_data_into_oracle(name, age):
    connection = None
    cursor = None
    try:
        # 데이터베이스 연결
        connection = cx_Oracle.connect(DB_USER, DB_PASSWORD, DB_DSN)
        print("Oracle 데이터베이스에 성공적으로 연결되었습니다.")

        cursor = connection.cursor()

        # 테이블이 없으면 생성 (최초 한 번만 실행)
        # 실제 운영 환경에서는 테이블이 미리 생성되어 있어야 합니다.
        try:
            cursor.execute("""
                CREATE TABLE PYTHON_USERS (
                    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
                    NAME VARCHAR2(100),
                    AGE NUMBER,
                    REG_DATE DATE DEFAULT SYSDATE
                )
            """)
            print("테이블 'PYTHON_USERS'가 생성되었습니다.")
        except cx_Oracle.Error as e:
            if "ORA-00955" in str(e): # ORA-00955: name is already used by an existing object (테이블이 이미 존재)
                print("테이블 'PYTHON_USERS'는 이미 존재합니다.")
            else:
                raise e # 다른 오류는 다시 발생시킴


        # 데이터 삽입 SQL
        sql_insert = "INSERT INTO PYTHON_USERS (NAME, AGE) VALUES (:1, :2)"

        # 데이터 삽징 (바인드 변수 사용 권장 - SQL 인젝션 방지)
        cursor.execute(sql_insert, (name, age))

        # 변경사항 커밋
        connection.commit()
        print(f"'{name}' ({age}세) 데이터가 성공적으로 저장되었습니다.")

    except cx_Oracle.Error as e:
        error_obj, = e.args
        print(f"Oracle 오류 발생: {error_obj.code} - {error_obj.message}")
        # 오류 발생 시 롤백 (선택 사항)
        if connection:
            connection.rollback()
            print("변경사항이 롤백되었습니다.")
    finally:
        # 커서와 연결 닫기 (항상 실행)
        if cursor:
            cursor.close()
        if connection:
            connection.close()
        print("데이터베이스 연결이 종료되었습니다.")

# --- 4. 함수 호출 예제 ---
if __name__ == "__main__":
    # 여러 데이터 삽입 예시
    insert_data_into_oracle("홍길동", 30)
    insert_data_into_oracle("김영희", 25)
    insert_data_into_oracle("이철수", 35)

    # 데이터 조회 (선택 사항)
    connection = None
    cursor = None
    try:
        connection = cx_Oracle.connect(DB_USER, DB_PASSWORD, DB_DSN)
        cursor = connection.cursor()
        cursor.execute("SELECT ID, NAME, AGE, REG_DATE FROM PYTHON_USERS ORDER BY ID DESC")
        rows = cursor.fetchall()
        print("\n--- 저장된 데이터 ---")
        for row in rows:
            print(f"ID: {row[0]}, 이름: {row[1]}, 나이: {row[2]}, 등록일: {row[3]}")
    except cx_Oracle.Error as e:
        error_obj, = e.args
        print(f"데이터 조회 중 오류 발생: {error_obj.code} - {error_obj.message}")
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()